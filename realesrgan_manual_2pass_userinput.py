# -*- coding: utf-8 -*-
"""REALESRGAN_MANUAL_2pass_userinput.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A46YHExOOkGVNv-ZzOPH0kkjAZwIs3nu
"""

!pip uninstall -y numpy
!pip install numpy==1.26.4 basicsr realesrgan torch==2.0.1 torchvision==0.15.2

import torch
import numpy as np
from PIL import Image
from basicsr.archs.rrdbnet_arch import RRDBNet
from realesrgan import RealESRGANer
from realesrgan.archs.srvgg_arch import SRVGGNetCompact
from torchvision.transforms.functional import to_tensor

from google.colab import drive
drive.mount('/content/drive')

model_path ='/content/drive/MyDrive/model/RealESRGAN_x4plus.pth'

state_dict=torch.load(model_path,map_location=torch.device('cuda'))['params_ema']

model=RRDBNet(num_in_ch=3,num_out_ch=3,num_feat=64,num_block=23,num_grow_ch=32,scale=4)

model.load_state_dict(state_dict,strict=True)

upsampler= RealESRGANer(
    scale=4,
    model_path='/content/drive/MyDrive/model/RealESRGAN_x4plus.pth',
    model=model,
    tile=768,
    pre_pad=0,
    half=True
)

img=Image.open('/content/drive/MyDrive/model/INP/inp2.jpg').convert('RGB')

img=np.array(img)

upscale_factor_str = input("Enter desired upscale factor (1x, 2x, 4x, 8x, 16x): ")

# Parse the upscale factor from the input string
try:
    upscale_factor = int(upscale_factor_str.replace('x', ''))
except ValueError:
    print("Invalid upscale factor. Please enter a value like 1x, 2x, 4x, 8x, or 16x.")
    # You might want to exit or handle the error differently here
    upscale_factor = 0 # Set to 0 or another indicator of error

# Determine if a second pass is needed
perform_second_pass = upscale_factor > 4

print(f"Upscale factor selected: {upscale_factor}x")
print(f"Perform second pass: {perform_second_pass}")

print(upscale_factor)

output,_=upsampler.enhance(img,outscale=upscale_factor)

output_img= Image.fromarray(output)

# Convert the output image back to a numpy array
img_for_second_pass = np.array(output_img)

# Apply the upsampler again conditionally
if perform_second_pass:
    # Calculate the remaining upscale factor for the second pass
    # If user selects 8x, first pass is 4x, second pass is 2x (8/4 = 2)
    # If user selects 16x, first pass is 4x, second pass is 4x (16/4 = 4)
    second_pass_scale = upscale_factor // 4
    output_second_pass, _ = upsampler.enhance(img_for_second_pass, outscale=second_pass_scale)
    output_img_second_pass = Image.fromarray(output_second_pass)
else:
    # If no second pass, the output is the result of the first pass
    output_img_second_pass = output_img

# Save the final output image with a filename reflecting the final upscale factor
output_path_second_pass = f'/content/drive/MyDrive/model/OUT/enhanced_output_inp2_8x.png'
output_img_second_pass.save(output_path_second_pass)

print(f"Final enhanced image saved to: {output_path_second_pass}")

"""# Task
Allow the user to select the desired upscale factor (1x, 2x, 4x, 8x, 16x) and implement conditional logic to perform a second enhancement pass if the selected factor is greater than 4x. Modify the `upsampler.enhance` calls to use the selected upscale factor and save the final output image with a filename reflecting the final upscale factor.

## Get user input

### Subtask:
Add a cell to prompt the user to select the desired upscale factor (1x, 2x, 4x, 8x, 16x).

**Reasoning**:
Add a code cell to prompt the user for the desired upscale factor using the input() function.
"""